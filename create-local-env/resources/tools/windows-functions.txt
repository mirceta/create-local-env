function listrdps {
	$b = mpwd
	cd $playground/create-local-env-config/rdps
	$i=0
	ls | % {$i++;"$($i-1) `t $_;"}
	$i=0
	cd $b
}


function srdpi {
	Param(
			[Parameter(Mandatory=$false)][string]$index = -1,
			[Parameter(Mandatory=$false)][string]$height = 2000,
			[Parameter(Mandatory=$false)][string]$width = 1920
		)
	if ($index -eq -1) {
		listrdps
	}
	else {
		$b = mpwd
		cd $playground/create-local-env-config/rdps
		$entries = ls
		cd $b
		$arr = $entries -split '\n' | where {$_}
		$result = $arr[$index]
		mstsc.exe $playground/create-local-env-config/rdps/$result /h:$height /w:$width
	}
	
}



function startsln {
	Param(
        [Parameter(Mandatory=$false)][string]$arg0,
		[Parameter(Mandatory=$false)][string]$arg1
    )

	if (-NOT $arg0) {
		startslnold
	}
	if ($arg0 -eq '.') {
		startslnold
	}
	if ($arg0 -eq 'help') {
		dotnet {{{utils}}} startsln $arg0
	}
	if ($arg0 -eq 'list') {
		dotnet {{{utils}}} startsln $arg0 $arg1
	}
	if ($arg0 -eq 'go') {
		$result = & dotnet {{{utils}}} startsln $arg0 $arg1
		startslnold $result
	}
	if ($arg0 -eq 'store') {
		dotnet {{{utils}}} startsln $arg0 $arg1
	}
	if ($arg0 -eq 'pwd') {
		$result = & dotnet {{{utils}}} startsln go $arg1
		cd $result
	}
}

function startslnold {
	Param(
        [Parameter(Mandatory=$false)][string]$path
    )

	if ($path) {
		if ((get-item $path) -is [System.IO.DirectoryInfo]) {
			start $path/*.sln
		}
	}
	else {
		start ./*.sln
	}
}







function envarlist {
	Param(
			[Parameter(Mandatory=$false)][string]$searchstring
		)
		dotnet {{{utils}}} envarlist $searchstring
}

function renametermwindow {
	Param(
				[Parameter(Mandatory=$true)][string]$newname
			)

		$host.UI.RawUI.WindowTitle = $newname
}

function startpych {
	Param(
			[Parameter(Mandatory=$false)][string]$folder
		)

	if ($folder) {
		pycharm64.exe $folder
	} else {
		pycharm64.exe
	}
}

function startvm ($vmname) {
	mstsc $vmname
}

function clipwd {
	Param(
        [Parameter(Mandatory=$false)][string]$file
    )
	$a = pwd
	$a = $a.ToString()
	if ($file) {
		$a + '/' + $file.Substring(2) | clip.exe
	} else {
		$a | clip.exe
	}

}

function mpwd {
	Param(
        [Parameter(Mandatory=$false)][string]$file
    )
	$a = pwd
	$a = $a.ToString()
	if ($file) {
		$a + '/' + $file.Substring(2)
	} else {
		$a
	}

}

function startand {
	Param(
        [Parameter(Mandatory=$false)][string]$folder
    )

	if ($folder) {
		$a = pwd
		$a = $a.ToString()
		cd $folder
		start '[android-studio-exe]'
		cd $a
	} 
	else {
		start '[android-studio-exe]'
	}
}

function open {
    Param(
        [Parameter(Mandatory=$false)][string]$document
    )
    if ((get-item $document) -is [System.IO.DirectoryInfo]) {
      [EXPLORER] $document
    } else {
      [CODE-EDITOR] $document
    }
}

function touch([string]$name) {
    new-item $name
}

function mysearchcur([string]$pattern) {
    $a = Get-ChildItem | where Name -like $pattern
    Write-Output $a
}

function mysearchcurrecurse([string]$pattern) {
    Get-ChildItem -Recurse | where Name -like $pattern
}

function mysearchbypathrecurse([string]$startfolder, [string]$pattern) {
    
    Get-ChildItem $startFolder -Recurse | where Name -like $pattern
	s
}


function mysearchbypath([string]$startfolder, [string]$pattern) {
    
    Get-ChildItem $startFolder | where Name -like $pattern

}


function MyFolderSizesNoRecurse {
    Param(
        [Parameter(Mandatory=$false)][string]$startFolder
    )

	$colItems = Get-ChildItem $startFolder | Where-Object {$_.PSIsContainer -eq $true} | Sort-Object
	foreach ($i in $colItems)
	{
 	   $subFolderItems = Get-ChildItem $i.FullName -recurse -force | Where-Object {$_.PSIsContainer -eq $false} | Measure-Object -property Length -sum | Select-Object Sum
 	   $i.FullName + " -- " + "{0:N2}" -f ($subFolderItems.sum / 1MB) + " MB"
	}
}

function MyFolderSizes {
    Param(
        [Parameter(Mandatory=$false)][string]$startFolder
    )
	$colItems = (Get-ChildItem $startFolder -recurse | Where-Object {$_.PSIsContainer -eq $True} | Sort-Object)
foreach ($i in $colItems)
    {
        $subFolderItems = (Get-ChildItem $i.FullName | Measure-Object -property length -sum)
        $i.FullName + " -- " + "{0:N2}" -f ($subFolderItems.sum / 1MB) + " MB"
    }
}

function FirstFewLines([string]$file, [int]$lines) {
	Get-Content $file | select -First $lines
}

function LastFewLines([string]$file, [int]$lines) {
	Get-Content $file | select -Last $lines
}

function FirstFewLinesDirectory([int]$lines) {
	$colItems = (Get-ChildItem .)
foreach ($i in $colItems)
    {
        FirstFewLines $i $lines
    }
}